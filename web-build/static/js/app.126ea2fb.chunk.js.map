{"version":3,"sources":["src/app/services/auth.ts","src/components/Info.tsx","src/style/theme.ts","src/components/TextInput.tsx","src/components/Button.tsx","src/components/FormField.tsx","src/screens/auth/Login.tsx","src/screens/auth/authSlice.tsx","src/screens/home/Home.tsx","src/hooks/useAuth.ts","src/screens/Main.tsx","src/app/store.ts","App.tsx","assets/app-logo.png"],"names":["api","createApi","baseQuery","fetchBaseQuery","baseUrl","headers","prepareHeaders","token","getState","auth","access_token","set","endpoints","builder","login","mutation","query","credentials","url","method","body","protected","useLoginMutation","useProtectedMutation","Info","text","View","style","container","Text","StyleSheet","create","padding","borderWidth","borderColor","borderRadius","width","marginTop","marginBottom","color","fontSize","theme","primary","white","grey","lightGrey","red","lightRed","TextInput","label","error","rest","errorStyle","defaultStyle","containerStyle","labelStyle","inputStyle","errorLabelStyle","height","paddingLeft","Button","onClick","disabled","TouchableOpacity","styles","button","onPress","alignItems","justifyContent","textTransform","backgroundColor","FormField","children","Login","navigation","useState","username","password","formState","setFormState","data","useEffect","isSuccess","navigate","Image","source","AppLogo","isError","message","placeholder","value","onChangeText","state","secureTextEntry","a","async","isLoading","flex","Platform","select","web","default","loginButton","slice","createSlice","name","initialState","user","refresh_token","reducers","setCredentials","payload","userData","jwtDecode","actions","selectCurrentUser","Home","useSelector","useMemo","useAuth","Stack","createNativeStackNavigator","Main","Navigator","initialRouteName","screenOptions","headerBackVisible","Screen","component","options","title","store","configureStore","reducer","reducerPath","authReducer","middleware","getDefaultMiddleware","concat","App","NavigationContainer","module","exports"],"mappings":"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","file":"static/js/app.126ea2fb.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { RootState } from \"../store\";\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  iss: string;\n  role: string[];\n}\n\nexport interface LoginResponse {\n  access_token: string;\n  refresh_token: string;\n  user_id: string;\n}\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://api.catchylabs.co/\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    prepareHeaders: (headers, { getState }) => {\n      // By default, if we have a token in the store, let's use that for authenticated requests\n      const token = (getState() as RootState).auth.access_token;\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  endpoints: (builder) => ({\n    login: builder.mutation<LoginResponse, LoginRequest>({\n      query: (credentials) => ({\n        url: \"api/v1/login\",\n        method: \"POST\",\n        body: credentials,\n      }),\n    }),\n    protected: builder.mutation<{ message: string }, void>({\n      query: () => \"protected\",\n    }),\n  }),\n});\n\nexport const { useLoginMutation, useProtectedMutation } = api;\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\ninterface Props {\n  text: string;\n}\n\nexport const Info: React.FunctionComponent<Props> = ({ text }) => (\n  <View style={style.container}>\n    <Text style={style.text}>{text}</Text>\n  </View>\n);\n\nconst style = StyleSheet.create({\n  container: {\n    padding: 8,\n    borderWidth: 1,\n    borderColor: \"red\",\n    borderRadius: 4,\n    width: \"100%\",\n    marginTop: 8,\n    marginBottom: 16,\n  },\n  text: {\n    color: \"red\",\n    fontSize: 14,\n  },\n});\n","export const theme = {\n  color: {\n    primary: \"#32CE57\",\n    white: \"#ffffff\",\n    grey: \"#d9d9d9\",\n    lightGrey: \"#f5f5f7\",\n    red: \"#FF0056\",\n    lightRed: \"#E10958\",\n  },\n};\n","import {\n  View,\n  TextInput as RNInput,\n  Text,\n  StyleSheet,\n  TextInputProps,\n} from \"react-native\";\nimport { theme } from \"../style/theme\";\n\ninterface Props extends TextInputProps {\n  label?: string;\n  error?: string;\n}\n\nexport const TextInput: React.FC<Props> = ({ label, error, ...rest }) => {\n  const style = error ? errorStyle : defaultStyle;\n  return (\n    <View style={style.containerStyle}>\n      {label && <Text style={style.labelStyle}>{label}</Text>}\n      <RNInput style={style.inputStyle} {...rest} />\n      {error && <Text style={style.errorLabelStyle}>{error}</Text>}\n    </View>\n  );\n};\n\nconst defaultStyle = StyleSheet.create({\n  containerStyle: {\n    width: \"100%\",\n  },\n  inputStyle: {\n    height: 48,\n    paddingLeft: 16,\n    borderWidth: 1,\n    borderColor: theme.color.grey,\n    borderRadius: 4,\n  },\n  labelStyle: {\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  errorLabelStyle: {\n    fontSize: 12,\n    color: theme.color.red,\n    marginTop: 4,\n  },\n});\n\nconst errorStyle = StyleSheet.create({\n  containerStyle: {\n    width: \"100%\",\n  },\n  inputStyle: {\n    height: 48,\n    paddingLeft: 16,\n    borderWidth: 1,\n    borderColor: theme.color.red,\n    borderRadius: 4,\n  },\n  labelStyle: {\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  errorLabelStyle: {\n    fontSize: 12,\n    color: theme.color.red,\n    marginTop: 4,\n  },\n});\n","import { StyleSheet, TouchableOpacity, Text } from \"react-native\";\nimport { theme } from \"../style/theme\";\n\ninterface Props {\n  text: string;\n  onClick: () => void;\n  disabled: boolean;\n}\n\nexport const Button: React.FC<Props> = ({ text, onClick, disabled }) => {\n  return (\n    <TouchableOpacity\n      style={styles.button}\n      onPress={onClick}\n      disabled={disabled}\n    >\n      <Text style={styles.text}>{text}</Text>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    height: 48,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n    width: \"100%\",\n    backgroundColor: theme.color.primary,\n    borderRadius: 4,\n  },\n  text: {\n    fontSize: 14,\n    color: theme.color.white,\n  },\n});\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\ninterface Props {\n  space?: string;\n}\n\nexport const FormField: React.FunctionComponent<Props> = ({ children }) => (\n  <View style={style.container}>{children}</View>\n);\n\nconst style = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    marginBottom: 16,\n  },\n});\n","import { View, StyleSheet, Image, Platform } from \"react-native\";\nimport { useEffect, useState } from \"react\";\nimport AppLogo from \"../../../assets/app-logo.png\";\nimport { useLoginMutation } from \"../../app/services/auth\";\nimport { Info } from \"../../components/Info\";\nimport { TextInput } from \"../../components/TextInput\";\nimport { Button } from \"../../components/Button\";\nimport { FormField } from \"../../components/FormField\";\n\ninterface LoginFormState {\n  username: string;\n  password: string;\n}\n\nexport const Login = ({ navigation }) => {\n  const [formState, setFormState] = useState<LoginFormState>({\n    username: \"\",\n    password: \"\",\n  });\n  const [login, data] = useLoginMutation();\n\n  const setUsername = (value: string) => {\n    setFormState((state) => ({ ...state, username: value }));\n  };\n\n  const setPassword = (value: string) => {\n    setFormState((state) => ({ ...state, password: value }));\n  };\n\n  const handleLogin = async () => {\n    login({ username: formState.username, password: formState.password });\n  };\n\n  useEffect(() => {\n    if (data.isSuccess) {\n      navigation.navigate(\"home\");\n    }\n  }, [data.isSuccess]);\n\n  return (\n    <View style={style.container}>\n      <Image\n        source={AppLogo}\n        style={{ width: 200, height: 60, marginBottom: 48 }}\n      />\n      {data.isError && <Info text={data.error?.data?.message} />}\n\n      <FormField>\n        <TextInput\n          placeholder=\"Username\"\n          label=\"Enter username\"\n          value={formState.username}\n          onChangeText={setUsername}\n          secureTextEntry={false}\n        />\n      </FormField>\n      <FormField>\n        <TextInput\n          placeholder=\"Password\"\n          label=\"Enter password\"\n          secureTextEntry={true}\n          value={formState.password}\n          onChangeText={setPassword}\n        />\n      </FormField>\n      <FormField>\n        <Button text=\"Login\" onClick={handleLogin} disabled={data.isLoading} />\n      </FormField>\n    </View>\n  );\n};\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    padding: 24,\n    ...Platform.select({\n      web: {\n        width: 400,\n      },\n      default: \"100%\",\n    }),\n  },\n  loginButton: {\n    width: \"100%\",\n  },\n});\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\nimport type { User } from \"../../app/services/auth\";\nimport type { RootState } from \"../../app/store\";\nimport jwtDecode from \"jwt-decode\";\n\ntype AuthState = {\n  user: User | null;\n  access_token: string | null;\n  refresh_token: string | null;\n};\n\nconst slice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    access_token: null,\n    refresh_token: null,\n  } as AuthState,\n  reducers: {\n    setCredentials: (\n      state,\n      {\n        payload: { access_token, refresh_token },\n      }: PayloadAction<{\n        user_id: string;\n        access_token: string;\n        refresh_token: string;\n      }>,\n    ) => {\n      const userData: User = jwtDecode(access_token);\n      state.user = userData;\n      state.access_token = access_token;\n      state.refresh_token = refresh_token;\n    },\n  },\n});\n\nexport const { setCredentials } = slice.actions;\n\nexport default slice.reducer;\n\nexport const selectCurrentUser = (state: RootState) => state.auth.user;\n","import { View, Text, StyleSheet } from \"react-native\";\nimport { useAuth } from \"../../hooks/useAuth\";\n\nexport const Home = () => {\n  const auth = useAuth();\n  return (\n    <View style={style.container}>\n      <Text>Username: {auth.user?.username}</Text>\n    </View>\n  );\n};\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: \"100%\",\n    alignItems: \"center\",\n    padding: 24,\n  },\n});\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentUser } from \"../screens/auth/authSlice\";\n\nexport const useAuth = () => {\n  const user = useSelector(selectCurrentUser);\n\n  return useMemo(() => ({ user }), [user]);\n};\n","import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\nimport { Login } from \"../screens/auth/Login\";\nimport { Home } from \"./home/Home\";\n\nconst Stack = createNativeStackNavigator();\n\nexport const Main = () => (\n  <Stack.Navigator\n    initialRouteName=\"login\"\n    screenOptions={{ headerBackVisible: false }}\n  >\n    <Stack.Screen name=\"login\" component={Login} options={{ title: \"Login\" }} />\n    <Stack.Screen\n      name=\"home\"\n      component={Home}\n      options={{ title: \"Home\", headerBackVisible: false }}\n    />\n  </Stack.Navigator>\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { api } from \"./services/auth\";\nimport authReducer from \"../screens/auth/authSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    [api.reducerPath]: api.reducer,\n    auth: authReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(api.middleware),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Main } from \"./src/screens/Main\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./src/app/store\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Main />\n      </NavigationContainer>\n    </Provider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/app-logo.3be78e48.png\";"],"sourceRoot":""}